#!/bin/bash -e
#
# Perform incremental backups using rsync and hard links.
#
# Usage:
#
#   $ sh backup.sh SOURCE=... BACKUP_HOST=... BACKUP_PATH=...
#
# Description:
#
#   The script will take an initial full backup of the SOURCE and store it in
#   the BACKUP_PATH directory on the BACKUP_HOST machine. This will create a
#   timestamp directory in BACKUP_PATH with format YYYY-MM-DDTHH:MM:SS that
#   contains the SOURCE backup copy. A symlink named 'current' will also be
#   created in BACKUP_PATH which will point to the timestamp directory.
#   Subsequent backups will create a new timestamp directory and copy only
#   the files that have changed from what is currently in the directory
#   pointed to by 'current'; all other files will be hard-linked in the new
#   timestamp directory from 'current'. Lastly, the 'current' symlink will
#   be updated to point to the latest timestamp directory.
#
#   Note: This script uses rsync and ssh, and public/private keys must be
#   configured between the SOURCE machine and the BACKUP_HOST machine for
#   passwordless authentication.
#
# Parameters:
#
#   SOURCE    The source path to back up
#   BACKUP_HOST
#             The hostname or IP of the remote host to back up on
#   BACKUP_PATH
#             The path on BACKUP_HOST to store the backups
#
# Example:
#
#   Back up the /home/ryan directory on this machine to /mnt/backupdrive on the
#   backupserver machine.
#
#   $ sh backup.sh SOURCE=/home/ryan BACKUP_HOST=backupserver BACKUP_PATH=/mnt/backupdrive
#
#   Note that this will create a directory named 'ryan' in /mnt/backupdrive on
#   backupserver that mirrors the 'ryan' directory on this machine.
#
# Credits:
#
#   I got the idea for this script from:
#     http://blog.interlinked.org/tutorials/rsync_time_machine.html
#
#   The author got the initial idea from:
#     http://www.mikerubel.org/computers/rsync_snapshots/
#
set -o pipefail
PROGNAME=$(basename $0)
# Note: The following line redirects stderr of this process to the
# stdin of tee through the FIFO created between this process and the
# process running tee. The tee process will send its input to the
# specified file in addition to stdout, which we redirect back to
# stderr. This has the effect of causing the stderr of this script
# to continue to be sent to stderr *and* also be written to the log
# file. This is useful for getting the stderr of the last command
# that caused the script to fail from the log file if it was
# unhandled.
err_log_path="/tmp/$PROGNAME.stderr.log"
exec 2> >(tee "$err_log_path" >&2)

log ()
{
  local level=$1
  local message=$2
  local app_name=$PROGNAME

  if [[ -z "$level" || -z "$message" ]]; then
    echo "$app_name: Must specify log level and message" 1>&2
    exit 1
  fi
  if [ "$level" == "stderr" ]; then
    echo "Error: $app_name: $message" 1>&2
    return
  fi

  local fullmsg="<$level> $message"
  set +e
  local logger_output=$(logger -p user.$level -t $app_name "$fullmsg" 2>&1)
  local status=$?
  set -e
  if (( $status != 0 )); then
    level=err
    logger -p user.$level -t $app_name "<$level> Error encountered while logging message: \"$logger_output\" ; Original message: \"$fullmsg\""
  fi
}

log_trapped_error()
{
  local line="$1"
  local errormsg="$(cat $err_log_path)"
  log err "Error on or near line $line: $errormsg"
  exit $code
}

trap 'log_trapped_error $LINENO' ERR


############################
# Check for dependencies
############################

if ! which logger > /dev/null; then
  log stderr "Must install \"logger\" command before making backups over a network. Try running the following and try again:"
  log stderr "  sudo apt-get install bsdutils"
  exit 1
fi

if ! which arp > /dev/null; then
  log stderr "Must install \"arp\" command before making backups over a network. Try running the following and try again:"
  log stderr "  sudo apt-get install net-tools"
  exit 1
fi

if ! which ping > /dev/null; then
  log stderr "Must install \"ping\" before making backups over a network. Try running the following and try again:"
  log stderr "  sudo apt-get install iputils-ping"
  exit 1
fi


###############################
# Configuration
###############################

if [[ "$BACKUP_USER" == "" || "$BACKUP_HOST" == "" || "$BACKUP_PATH" == "" || "$SOURCE" == "" ]]; then
  log stderr "Required configuration not provided. Exiting."
  exit 1
fi

DAYS_OF_INCREMENTAL_BACKUPS_TO_KEEP=14
INCLUDES=(
)
EXCLUDES=(
  "/dev/*"
  "/proc/*"
  "/sys/*"
  "/tmp/*"
  "/run/*"
  "/mnt/*"
  "/media/*"
  "/lost+found"
  "/home/*/.cache/chromium/*"
  "/home/*/.mozilla/firefox/*.default/Cache/*"
  "/home/*/.mozilla/firefox/*.default/thumbnails/*"
  "/home/*/.thumbnails/*"
  "/home/*/.xsession-errors"
)

declare -a excludes
i=0
for exclude in "${EXCLUDES[@]}"; do
  excludes[$i]="--exclude=$exclude"
  i=$(($i + 1))
done
declare -a includes
i=0
for include in "${INCLUDES[@]}"; do
  includes[$i]="--include=$include"
  i=$(($i + 1))
done

if [ "$BACKUP_USER" != "" ]; then
  remote="$BACKUP_USER@$BACKUP_HOST"
else
  remote=$BACKUP_HOST
fi


#################################################
# Check that expected backup host is available
#################################################
#
# Since this script could be run automatically via a cron job, and because it could be run
# on a host that changes networks frequently (like a laptop), it's important to have a way
# to ensure that we're talking to the right backup host before actually attempting a
# backup, to prevent hijacking attempts. To that end, this script can run in an (unsafe)
# "configuration" mode if the CONFIGURE variable is set to true. This causes the script to
# retrieve and cache information about the backup host for later use in verifying that
# it's safe to attempt a backup to the host. When not running in "configuration" mode,
# the script requires that the cached information about the backup host is already
# available; if it's not, the script will exit with an error. When not running in
# "configuration" mode, before performing a backup, the script will do the following:
#
# 1. Ping the backup host to see if it's available.
# 2. Compare the MAC address of the backup host with the configured MAC address. If the
#    MAC addresses match, the script continues; otherwise, the script stops. No errors are
#    produced, since this is an frequently-expected occurrence with a laptop.
# 3. (TODO for extra security) SSH into the backup host and compare a key shared between
#    the backup and source hosts. If the two keys don't match, the script aborts and
#    reports an error.

if [ "$CONFIGURE" == "true" ]; then
  set +e
  ping_out=$(ping -c 1 $BACKUP_HOST 2>&1)
  exit_status=$?
  set -e
  if (( $exit_status != 0 )); then
    log stderr "Unable to complete configuration. Exiting. (ping output: $ping_out)"
    exit 1
  fi

  set +e
  arp_out=$( (arp $BACKUP_HOST | sed -n '2,$ p' | awk '{ print $3 }' > $HOME/.backup_data) 2>&1 )
  exit_status=$?
  set -e
  if (( $exit_status != 0 )); then
    log stderr "Unable to complete configuration. Exiting. (arp output: $arp_out)"
    exit 1
  fi
else
  set +e
  ping_out=$(ping -c 1 $BACKUP_HOST 2>&1)
  exit_status=$?
  set -e
  if (( $exit_status != 0 )); then
    log info "Unable to verify backup host. Assuming that I'm not connected to the expected network. Exiting. (ping output: $ping_out)"
    exit 1
  fi
fi

# Read the backup host MAC from $HOME/.backup_data and compare with what's in
# the ARP cache and, if they match, continue with the backup; otherwise,
# abort.
backup_host_mac=$(arp $BACKUP_HOST | sed -n '2,$ p' | awk '{ print $3 }')
recorded_backup_host_mac=$(cat $HOME/.backup_data)
if [ "$backup_host_mac" != "$recorded_backup_host_mac" ]; then
  log info "Backup host has unexpected MAC address. Assuming that I'm not connected to the expected network. Exiting."
  exit 1
fi


################################
# Perform incremental backup
################################

date=`date -u "+%Y-%m-%dT%H:%M:%S"`
rsync -azPR $includes ${excludes[*]} --link-dest=$BACKUP_PATH/current --no-devices --no-specials $SOURCE $remote:$BACKUP_PATH/$date-incomplete
ssh $remote "mv $BACKUP_PATH/$date-incomplete $BACKUP_PATH/$date && rm -f $BACKUP_PATH/current && ln -s $date $BACKUP_PATH/current"


##############################
# Clean up old backups
##############################

# Get list of backup directories, sorted by oldest first
backed_up_dates=$(ssh $remote "ls -1d $BACKUP_PATH/[0-9]* | sed 's|$BACKUP_PATH/||'")

declare -a to_delete
i=0
for backed_up_dir in $backed_up_dates; do
  backed_up_date=$(echo $backed_up_dir | sed 's/\(.*\)-incomplete/\1/')
  backed_up_date_seconds_from_epoch=$(date -u --date=$backed_up_date "+%s")
  now_seconds_from_epoch=$(date -u --date=$date "+%s")
  seconds_since_backup_created=$(($now_seconds_from_epoch - $backed_up_date_seconds_from_epoch))
  days_since_backup_created=$(($seconds_since_backup_created / 60 / 60 / 24))

  if (( $days_since_backup_created > $DAYS_OF_INCREMENTAL_BACKUPS_TO_KEEP )); then
    to_delete[$i]=$backed_up_dir
    i=$(($to_delete_i + 1))
  else
    # starting from oldest backup, so first failed check means we're done
    break
  fi
done

if (( ${#to_delete[@]} > 1 )); then
  IFS=,
  dirs_to_delete="{${to_delete[*]}}"
  unset IFS
else
  dirs_to_delete="${to_delete[*]}"
fi

if [ "$dirs_to_delete" != "" ]; then
  ssh $remote "rm -rf $BACKUP_PATH/$dirs_to_delete"
fi
